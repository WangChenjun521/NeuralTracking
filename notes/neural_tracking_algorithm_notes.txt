Based on model/model.py file, "forward" method of the DeformNet class. 

Track 2 frames:
	0. Some initialization
	1. Compute dense flow from source to target.
	2. Initialize graph data.
	3. Apply dense flow to warp the source points to target frame.
	4. Construct point-to-point correspondences between source <-> target points.
	5. Run MaskNet on correspondences + source & target data.
	6. Initialize graph data.
	7. Estimate node deformations using differentiable Gauss-Newton.
		Initialize some counters / state variables.
		Then, for each batch, do:
		
		7.0 Some reporting and initialization
		7.1 Filter invalid matches
		7.2 Generate weight info to estimate average weight.
		7.3 Randomly subsample matches, if necessary.
		7.4 Remove canonical_node_positions if their corresponding clusters don't have enough correspondences
		7.5 Filter invalid edges.
		7.6 Execute Gauss-Newton solver.
			Initialize some parameters. 
			Initialize the output rotations & translations.
			Initialize helper data structures.
			Then, for each iteration up to max number of iterations, do:

				7.6.1 Compute data residual and jacobian.
				7.6.2 Compute ARAP residual and jacobian
				7.6.3 Solve linear system

		7.7 Write the solutions.
		7.8 Warp all valid source points using estimated deformations.
		7.9 Write to some state variables & output debugging info.

	8. (Housekeeping) Invalidate complete batch if there are too many matches in total.
	9. Return result as data dictionary.


# Meeting Notes
Date: 16th April 2021
According to implementation by dolphin-li(currently the best implementation of dynamic fusion found online): https://github.com/dolphin-li/DynamicFusion


For every frame: 

1. Get the Graph & RGBD Image from canonical pose for Neural Non-Rigid Tracking(NNRT) 

2. Get Deformed Graph from NNRT 

3. Create WarpField on voxel space from the deformed graph
	The warp field class has 2 important parts: 	
		2.1. KDTree for finding nearest neighbors of each voxel  
		2.2. warp_voxel_space(x,y,z) 

4. Perform surface fusion with the live frame

5. Extract the new canonical pose using marching cubes

6. Find new nodes to be inserted
7. Update Edges in the graph. (No need for pyramid update like in the original paper) 

8. Update the KDTree of the warp field

Current Tasks:- 
	1. Find TSDF volume implementation which can work with an input warp field (either Open3D or PYCuda Implementation: https://github.com/andyzeng/tsdf-fusion-python/blob/master/fusion.py)
	2. Implement WarpField Class using KDTree & Dual Quaternions
		2.1 Perform Trivail test by translating 3x3 Cube using a single-noded graph
		2.2 Perform Trivail test by affine transform 9x9 Cube using a multi-node graph

## Installation instructions to use nnrt:
1. Reclone repos 
	3rd-party/pybind11:
	3rd-party/Eigen: 
```
	cd 3rd-party
	rm Eigen
	git clone https://gitlab.com/libeigen/eigen.git
	mv eigen Eigen 
	cd Eigen 
	git checkout 199c5f2
	cd ..

	rm pybind11
	git clone https://github.com/pybind/pybind11.git
	cd pybind11
	git checkout 59f8d7f
```
2. Make nnrt module 
```
	cd <Neural Tracking Dir>
	cmake . 
	make 
```

3. Whenever you need to use the nnrt module  
```
import sys
sys.append("<Neural Tracking Dir>/csrc")

```